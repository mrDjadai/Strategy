unit DataTypes;

interface
 uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects;

Type

Vector2 = Record
  x, y : integer;
End;

  TCharacter = class
    public
      var
        sprite : string;
        pos : vector2;
        hp : integer;
        speed : integer;
        armor : integer;
  end;

  TCellType = (cBlocked, cDefault, cDifficult);


TCellData = class
  private
    procedure OnClick(sender : Tobject);
    procedure SetImage(im : TImage);
    function GetImage() : TImage;

    var
      img : TImage;

  public
    var
      sprite : string;
      decardPos : Vector2;
      cType : TCellType;
      character : TCharacter;

  procedure ReDraw();

  property Image: TImage read GetImage write SetImage;

End;

implementation

procedure TCellData.ReDraw();
var cBitmap : TBitMap;
begin
  img.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + sprite + '.png');

  if character <> nil then
  begin
     cBitMap := TBitMap.Create;
     cBitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + character.sprite + '.png');
      img.Bitmap.Canvas.DrawBitmap(
      cBitmap,
      RectF(0, 0, img.Bitmap.Width, img.Bitmap.Height),
      RectF(0, 0, cBitmap.Width, cBitmap.Height),
      1,
      True
    );
  end;

end;

procedure TCellData.OnClick(sender: TObject);
begin
  WriteLn('clicked    ' + sprite);            //тест

  if True then                                // если режим предварительной расстановки
  begin
    var c : TChatacter;
    c.sprite := 'pers';
    c.pos := decardPos;
    character := c;
    ReDraw();
  end;
end;

procedure TCellData.SetImage(im: TImage);
begin
  if img <> nil then
    img.OnClick := nil;
  img := im;
  img.OnClick := OnClick;
end;

function TCellData.GetImage: TImage;
begin
  Result := img;
end;

end.
