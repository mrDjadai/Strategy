unit CellManager;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects;


Type
CellType = (cBlocked, cDefault, cDifficult);

Vector3 = Record
  x, y, z : integer;
End;

Vector2 = Record
  x, y : integer;
End;

CellData = Record
  sprite : string;
  decardPos : Vector2;
  cubePos : Vector3;
  cType : CellType;
End;

procedure Init(mapName : string);

implementation

uses Window;

var
 x, y: integer;
 line : string;
 f : TextFile;
 map : Array of Array of CellData;


function GetCellById(id : char) : CellData;
begin
  Case id of
  '0' : begin
          Result.sprite := 'meadow';
          Result.cType := cDefault;
        end;
  '1' : begin
          Result.sprite := 'desert';
          Result.cType := cDefault;
        end;
  '2' : begin
          Result.sprite := 'forest';
          Result.cType := cDifficult;
        end;
  '3' : begin
          Result.sprite := 'hills';
          Result.cType := cBlocked;
        end;
  '4' : begin
          Result.sprite := 'sea';
          Result.cType := cBlocked;
        end;
  End;
end;

function DecardToCube(decardPos : Vector2) : Vector3;
begin

end;

procedure DrawMap(form : TForm2);
begin
var MyImage : TImage;
for var i := 0 to x do
  begin
    for var k := 0 to y do
    begin
      MyImage := TImage.Create(form);

      MyImage.Parent := form;

      MyImage.Position.X := 100 * i;
      MyImage.Position.Y := 150 * k;

      MyImage.Width := 100;
      MyImage.Height := 100;

      MyImage.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + map[i][k].sprite);
    end;
  end;
end;

procedure Init(mapName : string);
var i, len : integer;
begin
  AssignFile(f, ExtractFilePath(ParamStr(0)) + 'Resourses\Maps\' + mapName + '.txt');

  Reset(f);
  i := 0;
  while (not EOF(f)) do
  begin
    readln(f, line);

    SetLength(map, i + 1);
    SetLength(map[i], Length(line));
    y := i;
    x := Length(line) - 1;

    for var k := 0 to Length(line) - 1 do
    begin
      map[i][k] := GetCellById(line[k+1]);
      map[i][k].decardPos.x := k;
      map[i][k].decardPos.y := i;
      map[i][k].cubePos := DecardToCube(map[i][k].decardPos);
    end;

    inc(i);

  end;


  DrawMap(Form2);

end;


end.
