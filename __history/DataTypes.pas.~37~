unit DataTypes;

interface
 uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects;

Type

Vector2 = Record
  x, y : integer;
End;

  TCharacter = class
    private
      var
        img : TImage;

    destructor OnDestroy();


    public
      var
        sprite : string;
        pos : vector2;
        hp : integer;
        speed : integer;
        armor : integer;

        procedure ReDraw();
  end;

TCellType = (cBlocked, cDefault, cDifficult);


TCellData = class
  private
    procedure OnClick(sender : Tobject);
    procedure SetImage(im : TImage);
    function GetImage() : TImage;
    destructor OnDestroy();

    var
      img : TImage;

  public
    var
      sprite : string;
      decardPos : Vector2;
      cType : TCellType;
      character : TCharacter;

  procedure ReDraw();

  property Image: TImage read GetImage write SetImage;

End;



implementation

uses Drawer;

procedure TCellData.ReDraw();
var cBitmap : TBitMap;
begin
  img.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + sprite + '.png');

  if character <> nil then
    character.ReDraw();
end;

procedure TCellData.OnClick(sender: TObject);
begin
  WriteLn('clicked    ' + sprite);            //тест

  if True then                                // если режим предварительной расстановки
  begin
    var c : TCharacter;
    c := TCharacter.Create;
    c.sprite := 'pers';
    c.pos := decardPos;
    character := c;

    var myImage : TImage;
    myImage := TImage.Create(TComponent(Sender).Owner);
    myImage.Parent := TControl(Sender).Parent;

    MyImage.Position := img.Position;
    MyImage.Height := img.Height;
    MyImage.BringToFront();
    c.img := myImage;
    ReDraw();
  end;

end;

procedure TCellData.SetImage(im: TImage);
begin
  if img <> nil then
    img.OnClick := nil;
  img := im;
  img.OnClick := OnClick;
end;

function TCellData.GetImage: TImage;
begin
  Result := img;
end;


destructor TCharacter.OnDestroy();
begin
  img.Free;
  inherited Destroy;
end;


destructor TCellData.OnDestroy();
begin
  img.Free;
  character.Free;
  inherited Destroy;
end;


procedure TCharacter.ReDraw();
begin
  img.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + sprite + '.png');
  DrawOutline(img, TAlphaColors.Yellow, 50);
end;

end.
