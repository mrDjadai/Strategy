unit DataTypes;

interface
 uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects;

Type

Vector2 = Record
  x, y : integer;
End;

Vector3 = Record
  x, y, z : integer;
End;


TCharacter = class
    private

    destructor OnDestroy();


    public
      var
        sprite : string;
        pos : vector2;
        hp : integer;
        speed : integer;
        armor : integer;
        isSelected : boolean;
        img : TImage;
        procedure ReDraw();
  end;

TCellType = (cBlocked, cDefault, cDifficult);


TCellData = class
  private
    procedure OnClick(sender : Tobject);
    procedure SetImage(im : TImage);
    function GetImage() : TImage;
    destructor OnDestroy();

    var
      img : TImage;

  public
    var
      sprite : string;
      decardPos : Vector2;
      cubePos : Vector3;
      cType : TCellType;
      character : TCharacter;

  procedure ReDraw();

  property Image: TImage read GetImage write SetImage;

End;

function decardToCube(pos : vector2) : Vector3;

function GetDistance(a, b : vector3) : integer;

implementation

uses Drawer, CharacterManager, PlayerManager, CellManager;

procedure TCellData.ReDraw();
var cBitmap : TBitMap;
begin
  img.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + sprite + '.png');

  if character <> nil then
    character.ReDraw();
end;

procedure TCellData.OnClick(sender: TObject);
begin                          //тест
  WriteLn('clicked    ' + sprite + '  at  x=', decardPos.x, '  y=', decardPos.y, '   has character  ', character <> nil);


  if character = nil then       // если режим предварительной расстановки
  begin
    if selectedCharacter.x = -1 then
      CreateCharacter(Self)
    else
      TryMoveCharacter(GetCell(selectedCharacter), Self);
  end
  else
  begin
  if (selectedCharacter.x = decardPos.x) and (selectedCharacter.y = decardPos.y) then
      UnselectCharacter()
  else
    SelectCharacter(decardPos);
  end;

end;

procedure TCellData.SetImage(im: TImage);
begin
  if img <> nil then
    img.OnClick := nil;
  img := im;
  img.OnClick := OnClick;
end;

function TCellData.GetImage: TImage;
begin
  Result := img;
end;


destructor TCharacter.OnDestroy();
begin
  img.Free;
  inherited Destroy;
end;


destructor TCellData.OnDestroy();
begin
  img.Free;
  character.Free;
  inherited Destroy;
end;


procedure TCharacter.ReDraw();
begin
  img.Bitmap.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'Resourses\Sprites\' + sprite + '.png');
  if isSelected then
    DrawOutline(img, TAlphaColors.Yellow, 50);
end;


function decardToCube(pos : vector2) : Vector3;
begin

end;

function GetDistance(a, b : vector3) : integer;
begin
  result := (Abs(a.x - b.x) + Abs(a.y - b.y) + Abs(a.z - b.z)) div 2;
end;

end.
